import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics


Data Collection & Processing

#loading the data from csv file to a pandas dataframe
calories = pd.read_csv('C://Users/')


#adding another data set
excercise = pd.read_csv('C://Users/Downloads/exercise.csv')

excercise.head()

calories_data = pd.concat([excercise,calories['Calories']],axis=1)

calories_data

#checking the number of rows and columns
calories_data.shape

calories_data.isnull().sum()

calories_data.info()

#get some statistical measures about the data
calories_data.describe()


Data Visualization


#plotting the gender column in count plot
sns.countplot(calories_data['Gender']);


#finding the distribution of "Age" column

sns.distplot(calories_data['Age'],kde=True);


#finding the distribution of "Height" column

sns.distplot(calories_data['Height']);

#finding the distribution of "Weight" column

sns.distplot(calories_data['Weight']);

finding the correlation in the dataset

    1. Positive Correlation
    2. Negative Correlation
    
    
correlation = calories_data.corr()

#constructing a heatmap to understand the correlation

plt.figure(figsize=(10,10))

sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Blues');


calories_data.replace({'Gender':{'male':0,'female':1}},inplace=True)


calories_data.head()
X= calories_data.drop(columns=['User_ID','Calories'],axis=1)
Y = calories_data['Calories']

print(X)
print(Y)




###Splitting the data into training data and test data




X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.33, random_state=42)
print(X.shape,X_train.shape,X_test.shape)


######Model Training

XGBoost regressor

#loading the model
model = XGBRegressor()

#training the model with X_train
model.fit(X_train,Y_train)

###Evaluation

    Prediction on Test Data
    
    
test_data_prediction=model.predict(X_test)
print(test_data_prediction)



Mean Absolute Error



mae = metrics.mean_absolute_error(Y_test,test_data_prediction)
print('Mean Absolute Error= ',mae)
 
 
